[tool.poetry]
name = "databricks-infra"
version = "0.1.0"
description = "Terraform-based Infrastructure as Code for Databricks with comprehensive data engineering examples"
authors = ["Chanukya Pekala <chanukya.pekala@example.com>"]
readme = "README.md"
packages = [
    { include = "src" },
    { include = "course" }
]
keywords = ["databricks", "terraform", "data-engineering", "spark", "delta-lake"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[tool.poetry.dependencies]
python = "^3.9"
# Core Databricks and Spark dependencies
pyspark = "^3.5.0"
delta-spark = "^3.1.0"
databricks-cli = "^0.18.0"
databricks-sdk = "^0.18.0"

# Data manipulation and analysis
pandas = "^2.1.0"
numpy = "^1.24.0"
pyarrow = "^14.0.0"

# Configuration and utilities
pyyaml = "^6.0"
click = "^8.1.0"
python-dotenv = "^1.0.0"
requests = "^2.31.0"

# Jupyter and interactive development
ipython = "^8.12.0"
jupyter = "^1.0.0"
jupyterlab = "^4.0.0"
flake8 = "^7.3.0"

[tool.poetry.group.dev.dependencies]
# Code formatting and linting
black = "^24.4.2"
isort = "^5.13.2"
flake8 = "^7.0.0"
bandit = "^1.7.8"
mypy = "^1.10.0"

# Testing
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
pytest-xdist = "^3.6.0"

# Pre-commit and hooks
pre-commit = "^3.7.1"

# Documentation
sphinx = "^7.3.7"
sphinx-rtd-theme = "^2.0.0"
myst-parser = "^3.0.1"

# Development utilities
ipdb = "^0.13.13"
rich = "^13.7.1"
typer = "^0.12.3"

# Type stubs
types-requests = "^2.31.0"
types-pyyaml = "^6.0.12"

[tool.poetry.group.terraform.dependencies]
# Terraform tooling (optional)
python-terraform = "^0.10.1"

[tool.poetry.group.notebooks.dependencies]
# Additional notebook dependencies
matplotlib = "^3.8.0"
seaborn = "^0.13.0"
plotly = "^5.17.0"
bokeh = "^3.3.0"

[tool.poetry.scripts]
# CLI scripts for the project
databricks-setup = "src.cli:setup_databricks"
generate-datasets = "src.utils:generate_sample_data"
validate-notebooks = "src.validation:validate_notebooks"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.pytest_cache
  | \.tox
  | \.venv
  | build
  | dist
  | \.terraform
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "course"]
known_third_party = ["pyspark", "delta", "databricks"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    "venv",
    "env",
    ".terraform",
    "build",
    "dist"
]
per-file-ignores = [
    "__init__.py:F401",
    "course/notebooks/**/*.py:E402,F401"  # Databricks notebooks have different import patterns
]

# mypy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pyspark.*",
    "delta.*",
    "databricks.*",
    "pyarrow.*"
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "course.notebooks.*"
ignore_errors = true  # Databricks notebooks have different patterns

# pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "databricks: marks tests that require Databricks connection"
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/migrations/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv", ".terraform"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for test files